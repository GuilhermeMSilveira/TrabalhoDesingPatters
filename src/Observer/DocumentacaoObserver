#   Documentação: Padrão Observer
## Objetivo
O padrão Observer é um padrão de design comportamental que permite a definição de uma dependência de um para muitos entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes (observadores) são notificados e atualizados automaticamente. No contexto do nosso sistema, o padrão Observer é utilizado para notificar administradores sobre as preferências dos usuários, permitindo que diferentes partes do sistema reajam a mudanças nas preferências de forma desacoplada.

## Componentes
Observador (Classe Abstrata): Esta classe define a interface que todos os observadores concretos devem implementar. No nosso sistema, a classe Observador contém o método atualizar, que será chamado quando uma preferência do usuário for alterada.

Observadores Concretos: São implementações específicas da classe Observador, que reagem a notificações de mudanças. No nosso sistema, temos:

ObservadorNotificacaoOferta: Notifica os usuários sobre novas ofertas relacionadas às suas preferências.
ObservadorRecomendacao: Recomenda produtos ou serviços relacionados com base nas preferências do usuário.
NotificadorPreferenciasUsuario: Esta classe é o sujeito (ou "observable") que mantém uma lista de observadores e os notifica quando uma preferência do usuário é atualizada. Ela oferece métodos para registrar e remover observadores e para notificar todos os observadores quando ocorre uma alteração.

Preferencia: Representa as preferências do usuário. O objeto Preferencia contém informações sobre o tipo de preferência que está sendo atualizada, como "Hamburguer", "Pizza", etc.

Funcionamento
Registro de Observadores: Quando um administrador (ou uma parte do sistema) deseja ser notificado sobre mudanças nas preferências dos usuários, ele se registra como um observador no NotificadorPreferenciasUsuario. Isso é feito através do método registrarObservador.

Remoção de Observadores: Se um observador não deseja mais receber notificações, ele pode ser removido usando o método removerObservador.

Notificação: Quando uma preferência do usuário muda, o método notificarObservadores do NotificadorPreferenciasUsuario é chamado. Este método percorre a lista de observadores registrados e chama o método atualizar de cada um, passando a nova preferência como argumento.

Reação dos Observadores: Cada observador implementa sua lógica específica dentro do método atualizar. Por exemplo, ObservadorNotificacaoOferta pode exibir uma mensagem de oferta, enquanto ObservadorRecomendacao pode sugerir produtos relacionados.

## Benefícios do Padrão Observer
Desacoplamento: O padrão Observer permite que as partes do sistema que reagem a mudanças nas preferências dos usuários sejam desacopladas do objeto que gera essas mudanças. Isso facilita a manutenção e extensibilidade do sistema.

## Facilidade de Extensão: 
Novos tipos de observadores podem ser adicionados facilmente, sem a necessidade de modificar a lógica existente. Isso permite a introdução de novas funcionalidades, como notificações de eventos especiais ou recomendações personalizadas, sem impactar outras partes do sistema.

Reatividade: O padrão permite que o sistema reaja automaticamente a mudanças, melhorando a experiência do usuário ao manter as informações atualizadas em tempo real.

## Exemplo de Uso
No arquivo principal do sistema, após registrar os observadores, podemos notificar as preferências do usuário e observar como os observadores reagem:

typescript

// Instância do notificador de preferências
const notificador = new NotificadorPreferenciasUsuario();

// Criando observadores
const observadorOferta = new ObservadorNotificacaoOferta();
const observadorRecomendacao = new ObservadorRecomendacao();

// Registrando observadores
notificador.registrarObservador(observadorOferta);
notificador.registrarObservador(observadorRecomendacao);

// Criando preferências do usuário
const preferenciaUsuario = new Preferencia("Hamburguer");

// Notificando os observadores sobre as preferências do usuário
notificador.notificarObservadores(preferenciaUsuario);
Neste exemplo, quando a preferência do usuário é notificada, ambos os observadores reagem e executam sua lógica específica.